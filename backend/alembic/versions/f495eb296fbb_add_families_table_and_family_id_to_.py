"""Add families table and family_id to users

Revision ID: f495eb296fbb
Revises: 0339dc9bba67
Create Date: 2025-08-26 19:54:41.648820

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f495eb296fbb'
down_revision: Union[str, None] = '0339dc9bba67'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Create families table
    op.create_table('families',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('invite_code', sa.String(length=8), nullable=False),
    sa.Column('invite_code_expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_families_id'), 'families', ['id'], unique=False)
    op.create_index(op.f('ix_families_invite_code'), 'families', ['invite_code'], unique=True)
    
    # Step 2: Add family_id column to users table
    op.add_column('users', sa.Column('family_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_users_family_id'), 'users', ['family_id'], unique=False)
    op.create_foreign_key(None, 'users', 'families', ['family_id'], ['id'])
    
    # Step 3: Data migration - Create families for existing parent users
    # Use raw SQL for the complex data migration logic
    connection = op.get_bind()
    
    # Create families for existing parent users (those with is_parent = 1 AND parent_id IS NULL)
    connection.execute(sa.text("""
        INSERT INTO families (name, invite_code, created_at, updated_at)
        SELECT 
            CONCAT(u.username, '''s Family') as name,
            UPPER(SUBSTRING(MD5(CONCAT(u.id, RAND(), NOW())) FROM 1 FOR 8)) as invite_code,
            NOW() as created_at,
            NOW() as updated_at
        FROM users u 
        WHERE u.is_parent = 1 AND u.parent_id IS NULL
    """))
    
    # Step 4: Assign parents to their families
    connection.execute(sa.text("""
        UPDATE users u 
        JOIN families f ON f.name = CONCAT(u.username, '''s Family')
        SET u.family_id = f.id
        WHERE u.is_parent = 1 AND u.parent_id IS NULL
    """))
    
    # Step 5: Assign children to their parent's families
    connection.execute(sa.text("""
        UPDATE users c
        JOIN users p ON p.id = c.parent_id
        SET c.family_id = p.family_id
        WHERE c.is_parent = 0 AND c.parent_id IS NOT NULL
    """))
    
    # Step 6: Data validation - Check migration results
    result = connection.execute(sa.text("""
        SELECT 
            COUNT(*) as total_users,
            SUM(CASE WHEN family_id IS NOT NULL THEN 1 ELSE 0 END) as users_with_family,
            SUM(CASE WHEN family_id IS NULL THEN 1 ELSE 0 END) as orphaned_users
        FROM users
    """)).fetchone()
    
    print(f"Migration validation: Total users: {result.total_users}, "
          f"Users with family: {result.users_with_family}, "
          f"Orphaned users: {result.orphaned_users}")
    
    # Clean up only safe index changes - skip foreign key-dependent indexes
    # Don't drop idx_chore_assignee_id, idx_chore_creator_id as they're needed for FK constraints
    
    # Only drop indexes that aren't dependencies for foreign keys
    try:
        op.drop_index(op.f('idx_chore_created_at'), table_name='chores')
    except Exception:
        pass  # Index might not exist or be in use
        
    try:
        op.drop_index(op.f('idx_chore_status'), table_name='chores')
    except Exception:
        pass  # Index might not exist or be in use
        
    try:
        op.drop_index(op.f('idx_child_adjustments'), table_name='reward_adjustments')
    except Exception:
        pass  # Index might not exist or be in use
        
    try:
        op.drop_index(op.f('idx_parent_adjustments'), table_name='reward_adjustments')
    except Exception:
        pass  # Index might not exist or be in use
        
    try:
        op.create_index(op.f('ix_reward_adjustments_id'), 'reward_adjustments', ['id'], unique=False)
    except Exception:
        pass  # Index might already exist
        
    try:
        op.drop_index(op.f('idx_user_parent_id'), table_name='users')
    except Exception:
        pass  # Index might not exist or be in use
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema - WARNING: This will remove all family relationships!"""
    
    # WARNING: Data loss - all family relationships will be lost
    connection = op.get_bind()
    
    # Clear family_id from all users to avoid constraint issues
    connection.execute(sa.text("UPDATE users SET family_id = NULL"))
    
    # Drop the foreign key constraint with the correct name
    op.drop_constraint('users_ibfk_2', 'users', type_='foreignkey')
    
    # Drop the family_id column and its index
    op.drop_index(op.f('ix_users_family_id'), table_name='users')
    op.drop_column('users', 'family_id')
    
    # Drop the families table
    op.drop_index(op.f('ix_families_invite_code'), table_name='families')
    op.drop_index(op.f('ix_families_id'), table_name='families')
    op.drop_table('families')
    
    # Recreate old indexes (safe operations)
    try:
        op.create_index(op.f('idx_user_parent_id'), 'users', ['parent_id'], unique=False)
    except Exception:
        pass  # Index might already exist
        
    # Other index operations (safe with try-catch)
    try:
        op.drop_index(op.f('ix_reward_adjustments_id'), table_name='reward_adjustments')
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_parent_adjustments'), 'reward_adjustments', ['parent_id'], unique=False)
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_child_adjustments'), 'reward_adjustments', ['child_id'], unique=False)
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_chore_status'), 'chores', ['is_completed', 'is_approved', 'is_disabled'], unique=False)
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_chore_creator_id'), 'chores', ['creator_id'], unique=False)
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_chore_created_at'), 'chores', ['created_at'], unique=False)
    except Exception:
        pass
        
    try:
        op.create_index(op.f('idx_chore_assignee_id'), 'chores', ['assignee_id'], unique=False)
    except Exception:
        pass
        
    print("WARNING: All family relationships have been removed!")
    print("Users now only have parent-child relationships via parent_id field.")
