name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      version:
        description: 'Version (only required for custom release type)'
        required: false
        type: string
      release_notes:
        description: 'Release notes (optional - will auto-generate if empty)'
        required: false
        type: string

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate inputs
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          VERSION="${{ github.event.inputs.version }}"
          
          echo "Release type: $RELEASE_TYPE"
          
          # For custom release type, version is required
          if [[ "$RELEASE_TYPE" == "custom" ]]; then
            if [[ -z "$VERSION" ]]; then
              echo "::error::Version is required when release type is 'custom'"
              exit 1
            fi
            
            # Validate semantic version format
            if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::Version must be in format X.Y.Z (e.g., 1.0.0)"
              exit 1
            fi
            echo "Custom version provided: $VERSION"
          else
            # For non-custom types, version should not be provided
            if [[ -n "$VERSION" ]]; then
              echo "::warning::Version input is ignored for $RELEASE_TYPE release type"
            fi
            echo "Version will be calculated automatically based on $RELEASE_TYPE"
          fi
          
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> "$GITHUB_ENV"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate next version
        id: calc_version
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "custom" ]]; then
            NEW_VERSION="v${{ github.event.inputs.version }}"
          else
            # Extract version numbers from latest tag
            LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
            LATEST_TAG=${LATEST_TAG#v}  # Remove 'v' prefix
            
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}
            
            # Calculate new version based on release type
            case "${{ github.event.inputs.release_type }}" in
              major)
                NEW_VERSION="v$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          
          # Check if tag already exists
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "::error::Tag $NEW_VERSION already exists"
            exit 1
          fi

      - name: Generate release notes
        id: generate_notes
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          # Use provided notes or generate them
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            NOTES="${{ github.event.inputs.release_notes }}"
          else
            {
              echo "## What's Changed"
              echo ""
              
              # Get commit messages since last tag
              if [[ "$LATEST_TAG" != "v0.0.0" ]]; then
                git log --pretty=format:"* %s (%an)" "$LATEST_TAG"..HEAD
              else
                git log --pretty=format:"* %s (%an)"
              fi
              
              echo ""
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_VERSION"
            } > release_notes.md
            
            NOTES=$(cat release_notes.md)
          fi
          
          # Save notes for later use
          echo "$NOTES" > release_notes_final.md

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          
          # Push tag
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calc_version.outputs.new_version }}
          release_name: Release ${{ steps.calc_version.outputs.new_version }}
          body_path: release_notes_final.md
          draft: false
          prerelease: false

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          {
            echo "## Release Created Successfully! ðŸŽ‰"
            echo ""
            echo "**Version:** $NEW_VERSION"
            echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION"
            echo ""
            echo "### Docker Image Tags"
            echo "The ECR deployment workflow will automatically create the following tags:"
            echo "- \`${NEW_VERSION#v}\` (full version)"
            echo "- \`${NEW_VERSION#v%.*}\` (major.minor)"
            echo "- \`${NEW_VERSION#v%%.*}\` (major only)"
            echo "- \`latest\`"
            echo "- \`sha-${GITHUB_SHA:0:7}\`"
            echo ""
            echo "The ECR deployment will start automatically."
          } >> "$GITHUB_STEP_SUMMARY"