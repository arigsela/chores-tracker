name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      version:
        description: 'Version (only required for custom release type)'
        required: false
        type: string
      release_notes:
        description: 'Release notes (optional - will auto-generate if empty)'
        required: false
        type: string
      skip_deploy:
        description: 'Skip Docker build and ECR deployment'
        required: false
        type: boolean
        default: false
      update_gitops:
        description: 'Update GitOps repository with new version'
        required: false
        type: boolean
        default: true
      auto_merge:
        description: 'Auto-merge GitOps PR (use with caution)'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

permissions:
  contents: write
  issues: read
  pull-requests: read
  id-token: write

jobs:
  release-and-deploy:
    name: Create Release and Deploy to ECR
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30
    outputs:
      new_version: ${{ steps.calc_version.outputs.new_version }}
      version_number: ${{ steps.calc_version.outputs.new_version_number }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry || '852893458518.dkr.ecr.us-east-2.amazonaws.com' }}
      image_pushed: ${{ steps.check-secrets.outputs.configured }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate inputs
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          VERSION="${{ github.event.inputs.version }}"
          
          echo "Release type: $RELEASE_TYPE"
          
          if [[ "$RELEASE_TYPE" == "custom" ]]; then
            if [[ -z "$VERSION" ]]; then
              echo "::error::Version is required when release type is 'custom'"
              exit 1
            fi
            
            if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::Version must be in format X.Y.Z (e.g., 1.0.0)"
              exit 1
            fi
            echo "Custom version provided: $VERSION"
          else
            if [[ -n "$VERSION" ]]; then
              echo "::warning::Version input is ignored for $RELEASE_TYPE release type"
            fi
            echo "Version will be calculated automatically based on $RELEASE_TYPE"
          fi
          
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> "$GITHUB_ENV"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest backend tag (format: v*.*.*)
          # Filter out frontend tags and malformed tags
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
          
          # Fallback if no proper tags found
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
            echo "No valid backend tags found, using default: $LATEST_TAG"
          else
            echo "Found latest backend tag: $LATEST_TAG"
          fi
          
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate next version
        id: calc_version
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "custom" ]]; then
            NEW_VERSION="v${{ github.event.inputs.version }}"
          else
            LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
            echo "Processing latest tag: $LATEST_TAG"
            
            # Extract version number (remove v prefix)
            VERSION_PART=${LATEST_TAG#v}
            echo "Extracted version: $VERSION_PART"
            
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_PART"
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                NEW_VERSION="v$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          
          # Extract version components for Docker tags
          VERSION_NUMBER=${NEW_VERSION#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
          
          {
            echo "new_version=$NEW_VERSION"
            echo "new_version_number=${NEW_VERSION#v}"
            echo "major=$MAJOR"
            echo "minor=$MINOR"
            echo "patch=$PATCH"
          } >> "$GITHUB_OUTPUT"
          
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "::error::Tag $NEW_VERSION already exists"
            exit 1
          fi

      - name: Generate release notes
        id: generate_notes
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            NOTES="${{ github.event.inputs.release_notes }}"
          else
            {
              echo "## What's Changed"
              echo ""
              
              if [[ "$LATEST_TAG" != "v0.0.0" ]]; then
                git log --pretty=format:"* %s (%an)" "$LATEST_TAG"..HEAD
              else
                git log --pretty=format:"* %s (%an)"
              fi
              
              echo ""
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_VERSION"
            } > release_notes.md
            
            NOTES=$(cat release_notes.md)
          fi
          
          echo "$NOTES" > release_notes_final.md

      - name: Check if AWS secrets are configured
        id: check-secrets
        if: ${{ github.event.inputs.skip_deploy != 'true' }}
        run: |
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] || [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]] || [[ -z "${{ secrets.ECR_REPOSITORY }}" ]]; then
            echo "::warning::AWS secrets not configured. Skipping ECR deployment."
            echo "configured=false" >> "$GITHUB_OUTPUT"
          else
            echo "configured=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        if: steps.check-secrets.outputs.configured == 'true' && github.event.inputs.skip_deploy != 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check-secrets.outputs.configured == 'true' && github.event.inputs.skip_deploy != 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Set up Docker Buildx
        if: steps.check-secrets.outputs.configured == 'true' && github.event.inputs.skip_deploy != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        if: steps.check-secrets.outputs.configured == 'true' && github.event.inputs.skip_deploy != 'true'
        id: build
        uses: docker/build-push-action@v5
        timeout-minutes: 15
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.calc_version.outputs.new_version_number }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.calc_version.outputs.major }}.${{ steps.calc_version.outputs.minor }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.calc_version.outputs.major }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${{ github.sha }}
          build-args: |
            BUILD_VERSION=${{ steps.calc_version.outputs.new_version }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

      - name: Push Docker images to ECR
        if: steps.check-secrets.outputs.configured == 'true' && github.event.inputs.skip_deploy != 'true'
        timeout-minutes: 10
        run: |
          # Function to retry docker push
          retry_push() {
            local tag=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Pushing $tag (attempt $attempt/$max_attempts)..."
              if docker push "$tag"; then
                echo "Successfully pushed $tag"
                return 0
              else
                echo "Failed to push $tag"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            
            echo "Failed to push $tag after $max_attempts attempts"
            return 1
          }
          
          # Push all tags
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPO="${{ env.ECR_REPOSITORY }}"
          
          retry_push "$REGISTRY/$REPO:${{ steps.calc_version.outputs.new_version_number }}"
          retry_push "$REGISTRY/$REPO:${{ steps.calc_version.outputs.major }}.${{ steps.calc_version.outputs.minor }}"
          retry_push "$REGISTRY/$REPO:${{ steps.calc_version.outputs.major }}"
          retry_push "$REGISTRY/$REPO:latest"
          retry_push "$REGISTRY/$REPO:sha-${{ github.sha }}"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calc_version.outputs.new_version }}
          release_name: Release ${{ steps.calc_version.outputs.new_version }}
          body_path: release_notes_final.md
          draft: false
          prerelease: false

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          {
            echo "## Release Created Successfully! 🎉"
            echo ""
            echo "**Version:** $NEW_VERSION"
            echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION"
            echo ""
            
            if [[ "${{ steps.check-secrets.outputs.configured }}" == "true" ]] && [[ "${{ github.event.inputs.skip_deploy }}" != "true" ]]; then
              echo "### Docker Image Tags Created"
              echo "- \`${{ steps.calc_version.outputs.new_version_number }}\` (full version)"
              echo "- \`${{ steps.calc_version.outputs.major }}.${{ steps.calc_version.outputs.minor }}\` (major.minor)"
              echo "- \`${{ steps.calc_version.outputs.major }}\` (major only)"
              echo "- \`latest\`"
              echo "- \`sha-${{ github.sha }}\`"
              echo ""
              echo "**Registry:** \`${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}\`"
              echo "**Image Digest:** \`${{ steps.build.outputs.digest }}\`"
            else
              echo "### Docker Deployment"
              echo "⚠️ Docker image deployment was skipped"
              if [[ "${{ github.event.inputs.skip_deploy }}" == "true" ]]; then
                echo "Reason: Manually skipped via workflow input"
              else
                echo "Reason: AWS credentials not configured"
              fi
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  gitops-update:
    name: Update GitOps Repository
    needs: release-and-deploy
    runs-on: ubuntu-latest
    if: |
      needs.release-and-deploy.result == 'success' && 
      needs.release-and-deploy.outputs.image_pushed == 'true' &&
      github.event.inputs.skip_deploy != 'true' &&
      github.event.inputs.update_gitops != 'false'
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    
    steps:
      - name: Check GitOps PAT
        id: check-gitops-pat
        run: |
          echo "::group::Debug - Environment and Secrets Check"
          echo "AWS_REGION env var: '${{ env.AWS_REGION }}'"
          echo "ECR_REPOSITORY env var: '${{ env.ECR_REPOSITORY }}'"
          echo "ECR_REPOSITORY secret (masked): '${{ secrets.ECR_REPOSITORY }}'"
          echo "ECR Registry from previous job: '${{ needs.release-and-deploy.outputs.ecr_registry }}'"
          echo "Version from previous job: '${{ needs.release-and-deploy.outputs.version_number }}'"
          
          # Test if env vars are actually available
          echo ""
          echo "Shell variable test:"
          echo "AWS_REGION from env: '${AWS_REGION}'"
          echo "ECR_REPOSITORY from env: '${ECR_REPOSITORY}'"
          echo "::endgroup::"
          
          if [[ -z "${{ secrets.GITOPS_PAT }}" ]]; then
            echo "::warning::GITOPS_PAT secret not configured. Skipping GitOps update."
            echo "configured=false" >> "$GITHUB_OUTPUT"
          else
            echo "configured=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout GitOps repository
        if: steps.check-gitops-pat.outputs.configured == 'true'
        uses: actions/checkout@v4
        with:
          repository: arigsela/kubernetes
          token: ${{ secrets.GITOPS_PAT }}
          path: kubernetes

      - name: Update deployment manifest
        if: steps.check-gitops-pat.outputs.configured == 'true'
        run: |
          cd kubernetes
          
          # Install yq
          sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq
          
          echo "::group::Debug - Image URL Update"
          echo "=== Version Information ==="
          echo "New version: ${{ needs.release-and-deploy.outputs.version_number }}"
          echo "::endgroup::"
          
          # Update the image tag
          # Get the current image and update only the tag
          CURRENT_IMAGE=$(yq '.spec.template.spec.containers[0].image' base-apps/chores-tracker/deployments.yaml)
          echo "Current image: $CURRENT_IMAGE"
          
          # Extract the base image URL (everything before the colon)
          BASE_IMAGE=$(echo "$CURRENT_IMAGE" | cut -d':' -f1)
          echo "Base image: $BASE_IMAGE"
          
          # Use sed to update just the tag in the file
          sed -i "s|image: ${BASE_IMAGE}:[^[:space:]]*|image: ${BASE_IMAGE}:${{ needs.release-and-deploy.outputs.version_number }}|" \
            base-apps/chores-tracker/deployments.yaml
          
          # Verify the change
          echo ""
          echo "::group::Debug - Verify Update"
          echo "=== Before and After ==="
          UPDATED_IMAGE=$(yq '.spec.template.spec.containers[0].image' base-apps/chores-tracker/deployments.yaml)
          echo "Previous image: $CURRENT_IMAGE"
          echo "Updated image: $UPDATED_IMAGE"
          
          # Verify the tag was updated correctly
          CURRENT_TAG=$(echo "$CURRENT_IMAGE" | cut -d':' -f2)
          UPDATED_TAG=$(echo "$UPDATED_IMAGE" | cut -d':' -f2)
          EXPECTED_TAG="${{ needs.release-and-deploy.outputs.version_number }}"
          
          echo ""
          echo "=== Tag Validation ==="
          echo "Previous tag: $CURRENT_TAG"
          echo "Updated tag: $UPDATED_TAG"
          echo "Expected tag: $EXPECTED_TAG"
          
          if [[ "$UPDATED_TAG" == "$EXPECTED_TAG" ]]; then
            echo "✅ Tag update successful!"
          else
            echo "❌ Tag update failed!"
            echo "   Expected: $EXPECTED_TAG"
            echo "   Got: $UPDATED_TAG"
            exit 1
          fi
          
          # Verify the base image URL is preserved
          CURRENT_BASE=$(echo "$CURRENT_IMAGE" | cut -d':' -f1)
          UPDATED_BASE=$(echo "$UPDATED_IMAGE" | cut -d':' -f1)
          
          echo ""
          echo "=== Base Image Validation ==="
          echo "Previous base: $CURRENT_BASE"
          echo "Updated base: $UPDATED_BASE"
          
          if [[ "$CURRENT_BASE" == "$UPDATED_BASE" ]]; then
            echo "✅ Base image URL preserved!"
          else
            echo "❌ Base image URL changed!"
            echo "   This should not happen with sed update"
            exit 1
          fi
          echo "::endgroup::"

      - name: Create Pull Request
        if: steps.check-gitops-pat.outputs.configured == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITOPS_PAT }}
          path: kubernetes
          commit-message: |
            chore: update chores-tracker to ${{ needs.release-and-deploy.outputs.new_version }}
            
            Updates the chores-tracker deployment to use image version ${{ needs.release-and-deploy.outputs.new_version }} from ECR.
            
            Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-and-deploy.outputs.new_version }}
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          branch: update-chores-tracker-${{ needs.release-and-deploy.outputs.version_number }}
          delete-branch: true
          title: "chore: update chores-tracker to ${{ needs.release-and-deploy.outputs.new_version }}"
          body: |
            ## Deployment Update
            
            This PR updates the chores-tracker deployment to version **${{ needs.release-and-deploy.outputs.new_version }}**.
            
            ### Changes
            - Updated container image tag to version **${{ needs.release-and-deploy.outputs.version_number }}**
            - Image registry and repository name remain unchanged
            
            ### Release Information
            - **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-and-deploy.outputs.new_version }}
            - **Commit SHA**: ${{ github.sha }}
            - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Deployment Checklist
            - [x] Image successfully pushed to ECR
            - [ ] ArgoCD sync successful
            - [ ] Health checks passing
            - [ ] No breaking changes
            
            ### Notes
            After merging this PR, ArgoCD will automatically sync and deploy the new version to the cluster.
            
            ---
            *This PR was automatically generated by the release workflow.*
          labels: |
            deployment
            automated
            chores-tracker
          assignees: arigsela

      - name: Auto-merge PR
        if: |
          steps.check-gitops-pat.outputs.configured == 'true' &&
          github.event.inputs.auto_merge == 'true' &&
          steps.create-pr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ secrets.GITOPS_PAT }}
        run: |
          cd kubernetes
          
          # Wait a moment for PR to be fully created
          sleep 5
          
          # Enable auto-merge
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} \
            --auto \
            --merge \
            --delete-branch \
            --subject "chore: auto-merge deployment update"
          
          echo "Auto-merge enabled for PR #${{ steps.create-pr.outputs.pull-request-number }}"

      - name: GitOps Update Summary
        if: steps.check-gitops-pat.outputs.configured == 'true'
        run: |
          {
            echo "## GitOps Repository Update 🚀"
            echo ""
            
            if [[ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]]; then
              echo "**Pull Request Created:** #${{ steps.create-pr.outputs.pull-request-number }}"
              echo "**PR URL:** ${{ steps.create-pr.outputs.pull-request-url }}"
              echo ""
              echo "### Next Steps"
              if [[ "${{ github.event.inputs.auto_merge }}" == "true" ]]; then
                echo "- ✅ Auto-merge has been enabled"
                echo "- 🔄 PR will merge automatically once checks pass"
              else
                echo "- 👀 Review and merge the PR to deploy"
                echo "- 🔄 ArgoCD will sync automatically after merge"
              fi
            else
              echo "⚠️ Failed to create pull request"
            fi
          } >> "$GITHUB_STEP_SUMMARY"